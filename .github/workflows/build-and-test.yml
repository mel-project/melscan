name: BuildAndTest

on:
  pull_request:
    branches:
      - master

env:
  CARGO_TERM_COLOR: always
  CARGO_HOME: "/usr/local/cargo/"
  RUSTUP_HOME: "/usr/local/rustup"
  SCCACHE_DIR: "/usr/local/sccache"
  RUSTC_WRAPPER: "/usr/local/bin/sccache"
  npm_config_cache: "/usr/local/npm-cache"
  YARN_CACHE_FOLDER: "/usr/local/npm-cache"

jobs:
  mainnet-frontend-build:

    runs-on: self-hosted

    container:
      image: node:latest
      volumes:
        - /var/lib/docker:/var/lib/docker
        - /usr/local/npm-cache:/usr/local/npm-cache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Yarn Install
        run: yarn install --prefer-offline --cwd frontend

      - name: Run NPM Build
        env:
          BUILD: "development"
          VITE_BASE_URL: "https://scan.themelio.org"
        run: npm run build --prefix frontend

      - name: Copy Manifest To Build Folder
        run: cp frontend/package.json frontend/build/

      - name: Create Frontend Archive
        run: tar -czvf /tmp/frontend.tar.gz -C frontend build

      - uses: actions/upload-artifact@v3
        with:
          name: frontend-mainnet-dev
          path: /tmp/frontend-mainnet.tar.gz


  testnet-frontend-build:

    runs-on: self-hosted

    container:
      image: node:latest
      volumes:
        - /var/lib/docker:/var/lib/docker
        - /usr/local/npm-cache:/usr/local/npm-cache

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Run Yarn Install
        run: yarn install --prefer-offline --cwd frontend

      - name: Run NPM Build
        env:
          BUILD: "development"
          VITE_BASE_URL: "https://scan-testnet.themelio.org"
        run: npm run build --prefix frontend

      - name: Copy Manifest To Build Folder
        run: cp frontend/package.json frontend/build/

      - name: Create Frontend Archive
        run: tar -czvf /tmp/frontend.tar.gz -C frontend build

      - uses: actions/upload-artifact@v3
        with:
          name: frontend-testnet-dev
          path: /tmp/frontend-testnet.tar.gz




  backend-build:
    runs-on: self-hosted

    container:
      image: rust:alpine
      volumes:
        - /var/lib/docker:/var/lib/docker
        - /usr/local/cargo/git:/usr/local/cargo/git
        - /usr/local/cargo/registry:/usr/local/cargo/registry
        - /usr/local/sccache:/usr/local/sccache
        - /usr/local/rustup:/usr/local/rustup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install The Musl Development Package And Bash
        run: apk add musl-dev bash

      - name: Add Musl Toolchain
        run: rustup target add x86_64-unknown-linux-musl

      - name: Update Rust
        run: rustup update

      - uses: themeliolabs/actions-sccache@v1

      - uses: themeliolabs/actions-mold@v1

      - name: Build MelScan
        run: mold --run cargo build --target=x86_64-unknown-linux-musl --locked --manifest-path backend/Cargo.toml

      - name: Create MelScan Directory
        run: mkdir melscan-archive

      - name: Move MelwalletD Binary
        run: mv backend/target/x86_64-unknown-linux-musl/debug/melscan-backend melscan-archive/melscan-backend

      - name: Create MelScan Archive
        run: tar -czvf /tmp/melscan-backend.tar.gz melscan-archive

      - uses: actions/upload-artifact@v3
        with:
          name: backend-dev
          path: /tmp/backend.tar.gz








#  musl-build:
#
#    runs-on: self-hosted
#
#    container:
#      image: rust:latest
#      volumes:
#        - /var/lib/docker:/var/lib/docker
#        - /usr/local/cargo/git:/usr/local/cargo/git
#        - /usr/local/cargo/registry:/usr/local/cargo/registry
#        - /usr/local/sccache:/usr/local/sccache
#        - /usr/local/rustup:/usr/local/rustup
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Update Apt
#        run: apt update
#
#      - name: Install Requirements
#        run: apt -y install musl musl-tools p7zip
#
#      - uses: themeliolabs/actions-sccache@v1
#
#      - uses: themeliolabs/actions-mold@v1
#
#      - name: Add Default Toolchain
#        run: rustup default stable
#
#      - name: Add Musl Target Triple
#        run: rustup target add x86_64-unknown-linux-musl
#
#      - name: Run Musl Build
#        run: mold --run cargo build --target x86_64-unknown-linux-musl --features metrics --verbose
#
#      - name: Create Themelio-Node Archive
#        run: 7zr a themelio-node.7z target/x86_64-unknown-linux-musl/debug/themelio-node
#
#      - uses: actions/upload-artifact@v3
#        with:
#          name: themelio-node-dev
#          path: themelio-node.7z



#  build-docker-image-and-run-bats:
#    runs-on: self-hosted
#
#    container:
#      image: summerwind/actions-runner-dind:latest
#      volumes:
#        - /var/lib/docker:/var/lib/docker
#      options: --privileged --user root
#
#    needs:
#      - musl-build
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Update Apt
#        run: apt update
#
#      - name: Install Requirements
#        run: apt -y install p7zip gettext packer
#
#      - uses: actions/download-artifact@v3
#        with:
#          name: themelio-node-dev
#
#      - name: Extract Themelio-Node Archive
#        run: 7zr e themelio-node.7z
#
#      - name: Move Themelio-Node Binary
#        run: mv themelio-node docker/dev/
#
#      - name: Install Yq
#        run: pip install yq
#
#      - name: Create Version Environment Variable
#        run: echo "THEMELIO_NODE_VERSION=$(cat Cargo.toml | tomlq .package.version | tr -d '"')" >> $GITHUB_ENV
#
#      - name: Set Network
#        run: ./ci/set-network.sh
#
#      - name: Build Docker Image
#        env:
#          NETWORK_TO_BUILD: ${{ env.NETWORK_TO_BUILD }}
#        run: docker build --build-arg themelio_node_version=${THEMELIO_NODE_VERSION} -t "ghcr.io/themeliolabs/themelio-node-${NETWORK_TO_BUILD}:${THEMELIO_NODE_VERSION}" docker/dev/
#
#      - name: Run Docker Image
#        env:
#          NETWORK_TO_BUILD: ${{ env.NETWORK_TO_BUILD }}
#        run: docker run -p 11814:11814 -p 8080:8080 -e NETWORK=${NETWORK_TO_BUILD} ghcr.io/themeliolabs/themelio-node-${NETWORK_TO_BUILD}:${THEMELIO_NODE_VERSION}
#
#  verify-packer:
#    runs-on: self-hosted
#
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v3
#
#      - name: Add Packer Apt Key
#        run: curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
#
#      - name: Add Packer Repository Key
#        run: sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
#
#      - name: Update Apt
#        run: sudo apt update
#
#      - name: Install Requirements
#        run: sudo apt -y install gettext packer ansible
#
#      - name: Set Network
#        run: ./ci/set-network.sh
#
#      - name: Verify Packer
#        env:
#          PROMTAIL_USERNAME: ${{ secrets.PROMTAIL_USERNAME }}
#          PROMTAIL_PASSWORD: ${{ secrets.PROMTAIL_PASSWORD }}
#        run: ./ci/packer.sh